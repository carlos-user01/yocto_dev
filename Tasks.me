ðŸŸ¢ Nivel 1: Fundamentos + Arranque bÃ¡sico

- [ ] Preparar el entorno en Ubuntu (instalar dependencias de Yocto).

- [ ] Descargar Poky y familiarizarse con su estructura.

- [ ] Descargar la capa meta-raspberrypi.

- [ ] Configurar el entorno de build con oe-init-build-env.

- [ ] Configurar bblayers.conf y local.conf para RPi4 + core-image-minimal.

- [ ] Compilar la imagen (bitbake core-image-minimal).

- [ ] Grabar la imagen en la microSD (usar bmaptool o dd).

- [ ] Conectar la Raspberry Pi 4 a la PC vÃ­a UART (USBâ€“TTL).

- [ ] Conocer el pinout de GPIO para GND, TX, RX.

- [ ] Configurar terminal en Ubuntu (minicom o picocom).

- [ ] Arrancar la RPi4, ver el boot log completo en la consola serie.

- [ ] Ingresar al sistema con usuario root (sin password).



ðŸŸ¡ Nivel 2: Primeras personalizaciones

- [ ] Agregar servidor SSH (dropbear) a core-image-minimal.

- [ ] Reconstruir la imagen y volver a arrancar la RPi.

- [ ] Validar conexiÃ³n SSH por Ethernet desde la PC.

- [ ] AÃ±adir herramientas de usuario (nano, htop, iproute2, etc.).

- [ ] Explorar bitbake -c devshell para inspeccionar compilaciones.

- [ ] Modificar recetas existentes con .bbappend (ejemplo: cambiar mensaje de login).

- [ ] Probar ciclo tÃ­pico: compilar â†’ flashear SD â†’ boot â†’ debug.



ðŸ”µ Nivel 3: Kernel y Drivers en RPi4

- [ ] Ejecutar bitbake -c menuconfig virtual/kernel y modificar opciones.

- [ ] AÃ±adir un mÃ³dulo del kernel externo con receta propia.

- [ ] Explorar overlays de Raspberry Pi (.dtb y .dtbo).

- [ ] Habilitar perifÃ©ricos especÃ­ficos (I2C, SPI, UART extra).




ðŸŸ£ Nivel 4: Sistema Embedded Real

- [ ] Crear tu propia capa personalizada (meta-mypractice).

- [ ] Escribir una receta con un programa en C simple y desplegarlo en la RPi.

- [ ] Crear un servicio systemd que arranque automÃ¡ticamente tu app.

- [ ] Generar un SDK con populate_sdk y usarlo para cross-compilar apps fuera de Yocto.

- [ ] Personalizar tu propia imagen (core-image-mydevice) con todo lo necesario.




âš« Nivel 5: Avanzado / Profesional

- [ ] Crear tu propia distro Yocto (DISTRO).

- [ ] Aplicar patches a recetas de terceros.

- [ ] Optimizar builds con sstate-cache y mirrors.

- [ ] Usar devtool para agilizar integraciÃ³n de proyectos.

- [ ] Debug de errores en bitbake, kernel o boot.


- [ ] Contribuir con un parche o receta a meta-raspberrypi o a la comunidad.


ðŸŸ¢ Level 1: Fundamentals + Basic Startup

- [x] Prepare the environment in Ubuntu (install Yocto dependencies).
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [x] Download Poky and familiarize with its structure.
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [x] Download the meta-raspberrypi layer.
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [x] Configure the compilation environment with oe-init-build-env.
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [x] Configure bblayers.conf and local.conf for RPi4 + core-image-minimal.
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [x] Compile the image (bitbake core-image-minimal).
      Start Date: 03 Sep 2025
      End Date: 03 Sep 2025

- [ ] Flash the image to the microSD card (use bmaptool or dd).

- [ ] Connect the Raspberry Pi 4 to the PC via UART (USBâ€“TTL).

- [ ] Understand the GPIO pinout for GND, TX, and RX.

- [ ] Configure the terminal in Ubuntu (minicom or picocom).

- [ ] Boot the RPi4, view the full boot log on the serial console.

- [ ] Log in as root (no password).



ðŸŸ¡ Level 2: First Customizations

- [ ] Add an SSH server (dropbear) to core-image-minimal.

- [ ] Rebuild the image and reboot the RPi.

- [ ] Validate an SSH connection over Ethernet from the PC.

- [ ] Add user tools (nano, htop, iproute2, etc.).

- [ ] Explore bitbake -c devshell to inspect builds.

- [ ] Modify existing recipes with .bbappend (for example, change the login message).

- [ ] Test the typical cycle: build â†’ flash SD â†’ boot â†’ debug.



ðŸ”µ Level 3: Kernel and Drivers on RPi4

- [ ] Run bitbake -c menuconfig virtual/kernel and modify options.

- [ ] Add an external kernel module with own recipe.

- [ ] Explore Raspberry Pi overlays (.dtb and .dtbo).

- [ ] Enable specific peripherals (extra I2C, SPI, UART).



ðŸŸ£ Level 4: Real Embedded System

- [ ] Create your own custom layer (meta-mypractice).

- [ ] Write a recipe with a simple C program and deploy it to the RPi.

- [ ] Create a systemd service that automatically starts the application.

- [ ] Generate an SDK with populate_sdk and use it to cross-compile applications outside of Yocto.

- [ ] Customize my own image (core-image-mydevice) with everything you need.



âš« Level 5: Advanced / Professional

- [ ] Create my own Yocto distro (DISTRO).

- [ ] Apply patches to third-party recipes.

- [ ] Optimize builds with sstate-cache and mirrors.

- [ ] Use devtool to speed up project integration.

- [ ] Debug errors in bitbake, kernel, or boot.

- [ ] Contribute a patch or recipe to meta-raspberrypi or the community.
